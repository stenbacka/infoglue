<?xml version="1.0" encoding="UTF-8"?> 
 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
	<title>Choose Contents</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<link rel="stylesheet" type="text/css" href="css/cms.css" /> 
	<link rel="stylesheet" type="text/css" href="css/infogluecommons.css" /> 
	<script type="text/javascript" src="script/vector.js"></script>
	<script type="text/javascript" src="script/qualifyer.js"></script>
	<script type="text/javascript" src="script/infogluecommons.js"></script>
	
	<script language="JavaScript"> 
		window.resizeTo(660,640);
	</script> 
		
	<script type="text/javascript" language="JavaScript">
		
	<!-- 
		var exp;
		
		/**
		 * This is just a hook for the tree to notify us about whats expanded.
		 */
		 
		function notifyExp(v)
	    {
	    	exp=v;
	    }
	    
		/**
		 * This method changes to another repository.
		 */
		 
		function changeRepository(selectBox)
		{
			var repositoryId = selectBox.value;
			submitQualifyerWhenRepositoryChanges(repositoryId);
		}

		/**
		 * This method adds the choosen item to the list of qualifyers and rerenders the list.
		 */

	    function addQualifyer()
		{
			entityId = document.inputForm.entityId.value;
			path     = document.inputForm.path.value;
			
		    var qualifyer = new Qualifyer("Content", entityId, path);
			qualifyersVector.addElement(qualifyer);
			drawList();
		}
		
		/**
		 * This method creates a XML from the list of qualifyers.
		 */
		 		
		function createXML()
		{
			qualifyerXML = "<?xml version='1.0' encoding='UTF-8'?>";
			qualifyerXML += "<qualifyer entity='$currentEntity'>";
			
			for (var i=0; i<qualifyersVector.getSize(); i++)
			{
				var qualifyer = qualifyersVector.getElementAt(i);
				
				entityName 	= qualifyer.getEntityName();
				entityId   	= qualifyer.getEntityId();
				qualifyerXML += "<id>" + entityId + "</id>";
			}
		   	
		   	qualifyerXML += "</qualifyer>";

			return qualifyerXML;
		}
		
		/**
		 * This submits the qalifyers.
		 */
		 
		function submitQualifyer()
		{
		   	var xml = createXML();
			
			document.inputForm.qualifyerXML.value = xml;
		    showDiv("savingLayer");
			document.inputForm.submit();
		}
	
		/**
		 * This submits the qalifyers.
		 */
		 
		function submitQualifyerWhenRepositoryChanges(repositoryId)
		{
		   	var xml = createXML();
			
			document.inputForm.qualifyerXML.value = xml;
			document.inputForm.repositoryId.value = repositoryId;
			
			document.inputForm.action = 'MoveMultipleContent!input.action';
			showDiv("savingLayer");
			document.inputForm.submit();
		}
	  
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addTextLink(parent, address, text)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
			var linkText = document.createTextNode(text);
			link.appendChild(linkText);
			parent.appendChild(link);
		}
	
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addImageLink(parent, address, src)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
			var image = document.createElement("img");
			image.setAttribute("src", src);
			image.setAttribute("border", "0");
			link.appendChild(image);
			parent.appendChild(link);

			var separator = document.createElement("img");
			separator.setAttribute("src", "css/images/trans.gif");
			separator.setAttribute("border", "0");
			separator.setAttribute("width", "5");
			separator.setAttribute("height", "1");
			parent.appendChild(separator);
		}
		

		/**
		 * This method draws the list of qualifyers.
		 */
		 
		function drawList()
		{
			var table = document.getElementById("qualifyers")
			var parent = table.parentNode;
			parent.removeChild(table);

			mytable = document.createElement("TABLE");
			mytable.setAttribute("id", "qualifyers");
			mytable.setAttribute("border", "0");
			mytable.setAttribute("width", "100%");
			mytable.setAttribute("cellpadding", "0");
			mytable.setAttribute("cellspacing", "0");
	        mytablebody = document.createElement("TBODY");
	        for (var i=0; i<qualifyersVector.getSize(); i++)
			{
				var qualifyer = qualifyersVector.getElementAt(i);
				//alert("Element:" + qualifyer.getPath());
				var myTR = document.createElement("TR");
				var actionTD = document.createElement("TD");
				actionTD.setAttribute("width", "15");
				//addImageLink(actionTD, "javascript:moveQualifyerDown(" + i + ");", "css/images/downArrow.gif");
				//addImageLink(actionTD, "javascript:moveQualifyerUp(" + i + ");", "css/images/upArrow.gif");
				addImageLink(actionTD, "javascript:deleteQualifyer(" + i + ");", "css/images/delete.gif");
				var qualifyerTD = document.createElement("TD");
				qualifyerTD.setAttribute("align", "left");
				var qualifyerText = document.createTextNode(qualifyer.getPath());
				myTR.appendChild(actionTD);
				qualifyerTD.appendChild(qualifyerText);
				myTR.appendChild(qualifyerTD);

				mytablebody.appendChild(myTR);
			}
			 
	        mytable.appendChild(mytablebody);
	        parent.appendChild(mytable);
		}

		/**
		 * This method removes a qualifyer from the vector.
		 */
		 
		function deleteQualifyer(index)
		{
			qualifyersVector.removeElementAt(index);
			drawList();
		}
		
		/**
		 * This function initializes the vector of previous qualifyers.
		 */
		 
		function init()
		{
			#foreach($content in $qualifyers)
				//alert("$qualifyer");
				qualifyer = new Qualifyer("Content", "$content.id", "$content.name");
				qualifyersVector.addElement(qualifyer);
			#end
	
			//alert("qualifyersVector" + qualifyersVector.getSize());
			drawList();		
		}
		
		var qualifyersVector = new Vector(0);
	
		var IE  = (document.all)? true: false;
		var Mac = (navigator.cpuClass && navigator.cpuClass.match(/PPC/))? true: false;
		
		function checkDrag(event)
		{
    	    if(document.inputForm.draggedComponentId.value != "") 
    	    {	
    	    	addQualifyer();
	    	    document.inputForm.draggedComponentId.value = "";     
	    	    document.getElementById("buffer").style.visibility = "hidden";
    	    } 
   		}
   		
   		function clearDrag(event)
		{
    	    if(document.inputForm.draggedComponentId.value != "") 
    	    {	
    	    	document.inputForm.draggedComponentId.value = "";
	    	    document.getElementById("buffer").style.visibility = "hidden";
    	    } 
   		}
		
	    //-----------------------------------------------------------------
	    // onmousemove handler
	    //-----------------------------------------------------------------
	    function dragIt(e) 
	    {
			var e = e? e: window.event;
		    
		    drag = document.getElementById("buffer");
	        // -- Move drag element by the same amount the cursor has moved.
	        with (drag) 
	        {
	        	style.left = getX(e) + 1 + "px"; //- dx;
	          	style.top  = getY(e) + 1 + "px"; //- dy;
	        	//style.left = getX(e) - dx;
	          	//style.top  = getY(e) - dy;
	        }
	
	        return false;
	    }
	    
	    function getRect(obj) {
        var rect = new Object();
        rect.top = rect.left = 0;
        var parentObj = obj;
        while (parentObj != null) {
          rect.top  += parentObj.offsetTop;
          rect.left += parentObj.offsetLeft;
          parentObj = parentObj.offsetParent;
        }
        rect.bottom = rect.top  + obj.offsetHeight;
        rect.right  = rect.left + obj.offsetWidth;

		//if()
        return rect;
      }

	  //-----------------------------------------------------------------
      // browser-independent routines for determining event position
      //-----------------------------------------------------------------
      function getX(e) {
      	var x = 0;
        if (IE) {
          x = e.clientX;
          if (!Mac) {
            x += parent.document.documentElement.scrollLeft;
            x += parent.document.body.scrollLeft;
		  }
        } else {
          x = e.pageX + parent.window.scrollX;
        }
        return x
      }

      function getY(e) {
        var y = 0;
        if (IE) {
          y = e.clientY;
          if (!Mac) {
            y += document.documentElement.scrollTop;
            y += document.body.scrollTop;
		  }
        } else {
          y = e.pageY + window.scrollY;
        }
        return y;
      }
	    
	</script>
	
	<style>
		#buffer { 
			position:	absolute;
			z-index:	1000003;
			height:		1em;
			width:		1em;
			border: 	0px solid black;
			color:		#ffffff;
			visibility:	hidden;
			top:		0px;
			left:		0px;
		}
	</style>
	
</head>

<body class="contenttooledit" onload="javascript:init();" onMouseUp="clearDrag(event);">

<div id="buffer" style="top: 0; left: 0"><img src="css/images/tree/xp/item.png"></div>

<div id="savingLayer" class="infobackground">
	<div class="infoheader">Saving changes</div>
	<div class="infobody">Processing input - please wait!</div>
</div>

<table class="contenttooledit" cellpadding="0" cellspacing="0" border="0">
<tr>
	<td valign="top">
		
		<table cellpadding="0" cellspacing="0" border="0">
		<tr class="darkgreen">
			<td class="smalllabel">Add the contents you want to move and click "Next".</td>
		</tr>
		<tr>
			<td bgcolor="#EEF7DC" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td bgcolor="#C7D1B3" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="5"></td>
		</tr>		
		<tr>
			<td>
		  		<select size="1" name="repositoryId" class="sitedropbox" onChange="javascript:changeRepository(this);" class="contenttool">
				    <option value="">$ui.getString("tool.contenttool.chooseRepositoryLabel")</option>
				    #foreach ($repositoryVO in $repositories)
				    <option value="$repositoryVO.getRepositoryId()">$repositoryVO.getName()</option>
				    #end
				</select>
			</td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="5"></td>
		</tr>	
		<tr>
			<td class="menu" style="border: 1px solid #C7D1B3;">   
				#if($tree == "applet") 
					showJavaTree("350" "450" "199" "209" "179" "Content" $repositoryId "false")
				#else
					<IFRAME frameborder="0" name="itreeFrame" id="itreeFrame" src="ViewContentHtmlTree!bindingView.action?repositoryId=${repositoryId}" width="350" height="450" align="baseline"></IFRAME>
				#end
			</td>
		</tr>	
		<tr>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>
				<a href="javascript:addQualifyer();"><img src="$ui.getString("images.contenttool.buttons.addButton")" border="0"></a>
				<a href="javascript:window.opener.location.reload();window.close();"><img src="$ui.getString("images.contenttool.buttons.close")" width="50" height="25" border="0"></a>
				<a href="javascript:submitQualifyer();"><img src="$ui.getString("images.contenttool.buttons.next")" border="0"></a>
			</td>
		</tr>		
		<tr>
			<td>
				<form name="inputForm" action="MoveMultipleContent.action">
					<input type="hidden" name="draggedComponentId" value="">
					<input type="hidden" name="contentId" value="$contentId">
					<input type="hidden" name="entityId" value="">
					<input type="hidden" name="path" value="">
					<input type="hidden" name="repositoryId" value="$repositoryId">
					<input type="hidden" name="newParentContentId" value="">
					<input type="hidden" name="qualifyerXML" value="">
				</form>
			</td>
		</tr>		
		</table>
	</td>	
	
	<td>&nbsp;</td>
	
	<td valign="top">
		<table cellpadding="0" cellspacing="0" border="0">
		<tr class="darkgreen">
			<td class="smalllabel">The following contents will be moved</td>
		</tr>
		<tr>
			<td bgcolor="#EEF7DC" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td bgcolor="#C7D1B3" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="2"></td>
		</tr>		
		
		<tr>
			<td style="height: 27px;">
				Drag items from the tree to the area below or mark an item and use the "Add"-button.
			</td>
		</tr>
		<tr>
			<td style="border: 1px solid #C7D1B3; border-bottom: 0px solid #C7D1B3;" onMouseUp="checkDrag(event);">
				
				<TABLE id="qualifyers" border="1">
			  	
			  	</table>
			</td>
		</tr>
				
		<tr>
			<td style="border: 1px solid #C7D1B3; border-top: 0px solid #C7D1B3;" onMouseUp="checkDrag(event);">
			<img pos="-1" id="drop$qualifyer.sortOrder" src="css/images/trans.gif" width="280" height="19" ondrop="qdrop(this)" ondragover="qoverDrag(this)" ondragenter="qenterDrag(this)" ondragleave="qexitDrag(this)"><br>
			&nbsp;
			</td>
		</tr>
		</table>
		
	</td>
</tr>
</table>

</body>
</html>
