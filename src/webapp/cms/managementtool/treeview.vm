#*
*
*		TreeView
*		ss@frovi.com
*
*		Core Velocity tree renderer, this file is used by all parts 
*		that use the html-tree
*
*		TODO: Maybe this file should be in a resurces/templates/common folder
*		Be sure to update webwork.properties in case of moving this file.
*
*		Renders the tree generated by MakeTree.makeNodeList
*		Accosiated actionclass must deliver the nodelist in the $nodes collection
*
*		Images refered in this file:	  (used for)
*		images/tree/xp/fopen2.gif		- plus sign at last indentation level with two node connections
*		images/tree/xp/fopen3.gif		- plus sign at last indentation level with three node connections
*		images/tree/xp/space0.gif		- empty space, one indetation level.
*		images/tree/xp/space1.gif 	- one indentation level with vertical line ( | )
*		images/tree/xp/space2.gif		- one indentation level with two node connections
*		images/tree/xp/space3.gif		- one indentation level with three node connections
*
*		Usage:
* 		1. create a velocity template file
*		2. in the new file, define the macro drawItem($node)
* 		3. in the new file add the command #parse("path/treeview_explorerstyle_xp.vm") below the macro
*		4. create a action class that derives from treeViewAbstractAction, and implement the required method
*			getNodeSupplier() (you also need to write a nodesupplier).
*		5. map the newly created vm file to the action class.
*
*		Example vm-file:
*		#macro(drawItem $n)
*			<a href="shownode?nodeId=${n.getId()}">${n.getTitle()}</a>
*		#end
*		#drawTreeXP
*
*#

## BEGIN

#macro(drawItem $n)
		####
		## Draw the item icon Container or not? 
		
		#if ($n.isContainer())
		
			#set($acceptdrop='ondrop="drop()" ondragover="overDrag()" ondragenter="enterDrag()" ondragleave="exitDrag()"')
			#if ($n.isRoot())
				<img  $acceptdrop 
						id="icon${n.getId()}" 
						myLabel="${n.getTitle()}" 
						class="tree-icon" 
						src="css/images/tree/contentRoot.gif">
						
			#else
			
				<img  $canDrag $acceptdrop
						class="tree-icon" 
						src="${imgPath}emptyfolder$preOCImg$postImg" 
						id="icon${n.getId()}" 
						myLabel="${n.getTitle()}" />
						
			#end
			
		#else
			#set($acceptdrop='')
			<img  $canDrag
					class="tree-icon" 
					src="${imgPath}item$postImg" 
					id="icon${n.getId()}" 
					myLabel="${n.getTitle()}" />
		#end
		
		####
		## Draw item link			
		<a 	$canDrag 
				id="link${n.getId()}" 
				myLabel="${n.getTitle()}" 
				src="null" 
		 		$acceptdrop
		 		target="main" 
		 		href="JavaScript:nodeClick('${n.getId()}');">${n.getTitle()}</a>
		
#end

#macro(drawItemSimple $n)
		## Draw item link			
		<a id="link${n.getId()}" title="${n.getTitle()}" href="JavaScript:nodeClick('${n.getId()}');">${n.getTitle()}</a>
#end

#macro(drawTree $style)
	#drawTree(${style})
#end

#macro(drawTreeXP)
	## (use this as href for single branch open style)
	## ?exp=${n.getOpenCloseKey()}
	#set($preImg = "space")
	#set($postImg = ".png")
	#foreach ($n in $nodes)
		<div class="tree-item">
		#if ($n.isOpen())
			#set($preOCImg = "open")
			#set($addremove = "&rkey=")
		#else
			#set($preOCImg = "closed")		
			#set($addremove = "&akey=")
		#end
		
		#if (!$n.isRoot())		
			## Fix treelines
			#foreach ($s in $n.getRowList())
				#if ($velocityCount != $n.getRowList().size())		
					<img src='css/images/tree/xp/$preImg$s$postImg'/>
				#else
					#set($last = $s)
				#end
			#end
			
			## Fix openclose image
			#if ($n.hasChildren())
				<a class="branch" target="_self" href="?exp=$exp$addremove$n.getThisKey()$myTreeArgs"><img src="css/images/tree/xp/f$preOCImg$last$postImg" border=0 /></a>
			#else
				<img src='css/images/tree/xp/$preImg$last$postImg'/>
			#end
		#end

		#drawItem($n) 
		</div>	
	#end

#end

#macro(drawTreeExplorer)
	## (use this as href for single branch open style)
	## tree.action?exp=$n.getOpenCloseKey()


	#set($preImg = "space")
	#set($postImg = ".gif")

	#foreach ($n in $nodes)

		#if ($n.isOpen())
			#set($preOCImg = "open")
			#set($addremove = "&rkey=")
		#else
			#set($preOCImg = "closed")		
			#set($addremove = "&akey=")
		#end
		
		#if (!$n.isRoot())		
			## Fix treelines
			#foreach ($s in $n.getRowList())
				#if ($velocityCount != $n.getRowList().size())		
					<img width=16 height=16 src='css/images/tree/$preImg$s$postImg'>
				#else
					#set($last = $s)
				#end
			#end
			
			## Fix openclose image
			#if ($n.hasChildren())
				<a target="_self" href="?exp=$exp$addremove$n.getThisKey()$myTreeArgs"><img width=16 height=16 src="css/images/tree/f$preOCImg$last$postImg" border=0></a>
			#else
				<img width=16 height=16 src='css/images/tree/$preImg$last$postImg'>
			#end
		#end

		#drawItem($n) <br>
				
	#end
#end

#macro(drawTreeSimple)
	#set($preImg = "space")
	#set($postImg = ".gif")
	
	#foreach ($n in $nodes)
	
		#if ($n.isOpen())
			#set($preOCImg = "open")
			#set($addremove = "&rkey=")
		#else
			#set($preOCImg = "closed")		
			#set($addremove = "&akey=")
		#end
		
		#if (!$n.isRoot())		
			## Fix treelines
			#foreach ($s in $n.getRowList())
				<img width=16 height=16 src='css/images/tree/$preImg$s$postImg'>
			#end
			
			## Fix openclose image
			#if ($n.isContainer())
				#if ($n.hasChildren())
					<a target="_self" href="?exp=$exp$addremove$n.getThisKey()$myTreeArgs"><img width=16 height=16 src="css/images/tree/folder$preOCImg$postImg" border=0></a>
				#else
					<img width=16 height=16 src='css/images/tree/emptyfolder.gif'>
				#end
			#end
		#end
	
		#drawItemSimple($n)
	
		<br>			
	#end
#end
