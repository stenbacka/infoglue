<?xml version="1.0" encoding="UTF-8"?> 

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
	<title>Choose sitenodes</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<link rel="stylesheet" type="text/css" href="css/cms.css" /> 
	<link rel="stylesheet" type="text/css" href="css/infogluecommons.css" /> 
	<script type="text/javascript" src="script/vector.js"></script>
	<script type="text/javascript" src="script/qualifyer.js"></script>
	<script type="text/javascript" src="script/infogluecommons.js"></script>
	
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/core.js"></script>
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/events.js"></script>
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/css.js"></script>
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/coordinates.js"></script>
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/drag.js"></script>
	<script language="JavaScript" type="text/javascript" src="script/tool-man/org/tool-man/dragsort.js"></script>

	<script language="JavaScript"> 
		window.resizeTo(700,600);
	</script> 

	<script type="text/javascript">
	<!-- 
		var dragsort = ToolMan.dragsort();
		var junkdrawer = ToolMan.junkdrawer();
						
		var exp;
	
		/**
		 * This is just a hook for the tree to notify us about whats expanded.
		 */

	    function notifyExp(v)
	    {
	    	exp=v;
	    }
	    
		/**
		 * This method changes to another repository.
		 */
		 
		function changeRepository(selectBox)
		{
			var repositoryId = selectBox.value;
			var url = "${currentAction}?repositoryId=" + repositoryId + "&siteNodeId=$siteNodeId&languageId=$languageId&contentId=$contentId&componentId=$componentId&propertyName=$propertyName&tree=$tree&showSimple=$showSimple&showDecorated=$!showDecorated";
			document.location.href = url;
		}
	    
		function changeTree(tree)
		{
			qualifyerString = "";
			#foreach($qualifyer in $qualifyers)
				qualifyerString += "$qualifyer.value,";
			#end 
						 		    
		    var url = "ViewMultiSelectStructureTreeForServiceBinding!changeTree.action?tree=" + tree + "&serviceBindingId=$serviceBindingId&repositoryId=$repositoryId&siteNodeVersionId=$siteNodeVersionId&availableServiceBindingId=$availableServiceBindingId&serviceDefinitionId=$serviceDefinitionId&entityName=SiteNode&showSimple=$showSimple&showDecorated=$!showDecorated&qualifyerString=" + qualifyerString;
		    //alert('Calling:' + url);
		    self.location.href = url;
		}
		
		function loadMainArea(entityId, repositoryId, path)
		{
			document.inputForm.entityId.value = entityId;
		 	document.inputForm.repositoryId.value = repositoryId;
		 	document.inputForm.path.value = path;	
		}
	    
	    function addQualifyer()
		{
			entityId = document.inputForm.entityId.value;
			if(entityId == '' || entityId == '${select}')
			{
				alert("You must choose a page to add");
			}
			else
			{
				path     = document.inputForm.path.value;
				bindingTypeId = 1; //0 = Content, 1 = SiteNode
				
			    var binding = new Binding("SiteNode", entityId, path);
				siteNodesVector.addElement(binding);
				drawList();
			}
		}
				
		function submitBinding()
		{
		    qualifyerXML = "<?xml version='1.0' encoding='UTF-8'?>";
			qualifyerXML += "<qualifyer>";
			var path = "";
			for (var i=0; i<siteNodesVector.getSize(); i++)
			{
				var binding = siteNodesVector.getElementAt(i);
				if(i > 0) 
					path = path + ", ";
				path 		= path + binding.getPath();
				entityName 	= binding.getEntityName();
				entityId   	= binding.getEntityId();
				qualifyerXML += "<" + entityName + ">" + entityId + "</" + entityName + ">";
			}
		   	qualifyerXML += "</qualifyer>";
			
		    document.submitForm.target = self.opener.name;
		    document.submitForm.path.value = path;
		    document.submitForm.qualifyerXML.value = qualifyerXML;
		    document.submitForm.submit();
		    window.close();
		}

		/**
		 * Binding object
		 */

		function Binding(entityName, entityId, path)
		{
			this.entityName = entityName;
			this.entityId 	= entityId;
			this.path 		= path;
		  
		  	this.getPath 		= getPath;
		  	this.getEntityName 	= getEntityName;
		  	this.getEntityId 	= getEntityId;
		  	this.setPath 		= setPath;
		  	this.setEntityName 	= setEntityName;
		  	this.setEntityId 	= setEntityId;
		}
		  
		function getPath()
		{
		  	return this.path;
		}

		function getEntityName()
		{
		  	return this.entityName;
		}

		function getEntityId()
		{
		  	return this.entityId;
		}

		function setPath(path)
		{
		  	this.path = path;
		}

		function setEntityName(entityName)
		{
		  	this.entityName = entityName;
		}

		function setEntityId(entityId)
		{
			this.entityId = entityId;
		}

	  
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addTextLink(parent, address, text)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
			var linkText = document.createTextNode(text);
			link.appendChild(linkText);
			parent.appendChild(link);
		}
	
	  	/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addImageLink(parent, address, src)
		{
			var link = document.createElement("a");
			link.setAttribute("href", address);
		
			var image = document.createElement("img");
			image.setAttribute("src", src);
			image.setAttribute("border", "0");
	
			link.appendChild(image);
			parent.appendChild(link);

			var separator = document.createElement("img");
			separator.setAttribute("src", "css/images/trans.gif");
			separator.setAttribute("border", "0");
			separator.setAttribute("width", "5");
			separator.setAttribute("height", "1");
			parent.appendChild(separator);
		}
		
		/**
	  	 * This function creates a href-tag by manipulating the DOM.
	  	 */
	  	 
		function addDividerImage(parent, width, height)
		{
			var separator = document.createElement("img");
			separator.setAttribute("src", "css/images/trans.gif");
			separator.setAttribute("border", "0");
			separator.setAttribute("width", width);
			separator.setAttribute("height", height);
			parent.appendChild(separator);
		}

		/**
		 * This method draws the list of bindings.
		 */
		 
		function drawList()
		{
			var mytable = document.getElementById("bindings")
			var parent = mytable.parentNode;
			parent.removeChild(mytable);

			mytable = document.createElement("TABLE");
			mytable.setAttribute("id", "bindings");
			mytable.setAttribute("border", "0");
			mytable.setAttribute("width", "100%");
			mytable.setAttribute("cellpadding", "0");
			mytable.setAttribute("cellspacing", "0");
	        mytablebody = document.createElement("TBODY");

			var myTR = document.createElement("TR");
			var bindingTD = document.createElement("TD");
			bindingTD.setAttribute("width", "100%");
			var actionTD = document.createElement("TD");
			actionTD.setAttribute("width", "100");
						
			myActionList = document.createElement("ul");
			myActionList.setAttribute("id", "actions");

	        for (var i=0; i<siteNodesVector.getSize(); i++)
			{
				var binding = siteNodesVector.getElementAt(i);

				var myLI = document.createElement("li");
				myLI.setAttribute("itemID", i);
				
				addImageLink(myLI, "javascript:moveBindingDown(" + i + ");", "css/images/downArrow.gif");
				addImageLink(myLI, "javascript:moveBindingUp(" + i + ");", "css/images/upArrow.gif");
				addImageLink(myLI, "javascript:deleteBinding(" + i + ");", "css/images/delete.gif");
				addDividerImage(myLI, 1, 16);
								
				myActionList.appendChild(myLI);
			}
			actionTD.appendChild(myActionList);
			
			myList = document.createElement("ul");
			myList.setAttribute("id", "currentBindings");
			
	        for (var i=0; i<siteNodesVector.getSize(); i++)
			{
				var binding = siteNodesVector.getElementAt(i);

				var myLI = document.createElement("li");
				myLI.setAttribute("itemID", i);
	
				addImageLink(myLI, "#", "script/xloadtree/images/xp/page.png");
				
				var bindingText = document.createTextNode(binding.getPath());
				myLI.appendChild(bindingText);
				addDividerImage(myLI, 5, 16);
				
				myList.appendChild(myLI);
			}
			
			bindingTD.appendChild(myList);
			 
	        //alert("childNodes" + parent.childNodes.length);

			myTR.appendChild(bindingTD);
			myTR.appendChild(actionTD);

			mytablebody.appendChild(myTR);
			 
	        mytable.appendChild(mytablebody);
	        parent.appendChild(mytable);
	        
			dragsort.makeListSortable(document.getElementById("currentBindings"), verticalOnly, changeOrder);
		}

		/**
		 * This method removes a binding from the vector.
		 */
		 
		function deleteBinding(index)
		{
			siteNodesVector.removeElementAt(index);
			drawList();
		}
		
		/**
		 * This method moves a binding 1 step up in the vector.
		 */
		 
		function moveBindingUp(index)
		{
			if(index > 0)
			{
				var binding 		= siteNodesVector.getElementAt(index);
				var previousBinding = siteNodesVector.getElementAt(index - 1);
				
				path 		= binding.getPath();
				entityName 	= binding.getEntityName();
				entityId 	= binding.getEntityId();
				
				binding.setPath(previousBinding.getPath())
				binding.setEntityName(previousBinding.getEntityName())
				binding.setEntityId(previousBinding.getEntityId())
			
				previousBinding.setPath(path)
				previousBinding.setEntityName(entityName)
				previousBinding.setEntityId(entityId)
				
				drawList();
			}			
		}

		/**
		 * This method moves a binding 1 step up in the vector.
		 */
		 
		function moveBindingDown(index)
		{
			if(index < siteNodesVector.getSize() - 1)
			{
				var binding 		= siteNodesVector.getElementAt(index);
				var previousBinding = siteNodesVector.getElementAt(index + 1);
				
				path 		= binding.getPath();
				entityName 	= binding.getEntityName();
				entityId 	= binding.getEntityId();
				
				binding.setPath(previousBinding.getPath())
				binding.setEntityName(previousBinding.getEntityName())
				binding.setEntityId(previousBinding.getEntityId())
			
				previousBinding.setPath(path)
				previousBinding.setEntityName(entityName)
				previousBinding.setEntityId(entityId)
			
				drawList();
			}
		}
		
		
		/**
		 * This method moves a binding 1 step up in the vector.
		 */
		 
		function dragBindingUp(originalIndex, targetIndex)
		{
			var currentIndex = originalIndex;
			while(currentIndex != targetIndex)
			{
				//alert(currentIndex + "!=" + targetIndex);
				var binding 		= siteNodesVector.getElementAt(currentIndex);
				var previousBinding = siteNodesVector.getElementAt(currentIndex - 1);
				
				path 		= binding.getPath();
				entityName 	= binding.getEntityName();
				entityId 	= binding.getEntityId();
				
				binding.setPath(previousBinding.getPath());
				binding.setEntityName(previousBinding.getEntityName());
				binding.setEntityId(previousBinding.getEntityId());
			
				previousBinding.setPath(path);
				previousBinding.setEntityName(entityName);
				previousBinding.setEntityId(entityId);
				
				currentIndex = currentIndex - 1;				
			}			
			
			drawList();
		}

		/**
		 * This method moves a binding 1 step up in the vector.
		 */
		 
		function dragBindingDown(originalIndex, targetIndex)
		{
			var currentIndex = originalIndex;
			while(currentIndex != targetIndex)
			{
				//alert(currentIndex + "!=" + targetIndex);
				var binding 	= siteNodesVector.getElementAt(currentIndex);
				var nextIndex = currentIndex + 1;
				//alert("nextIndex:" + nextIndex);
				var nextBinding = siteNodesVector.getElementAt(currentIndex + 1);
				
				path 		= binding.getPath();
				entityName 	= binding.getEntityName();
				entityId 	= binding.getEntityId();
				
				binding.setPath(nextBinding.getPath());
				binding.setEntityName(nextBinding.getEntityName());
				binding.setEntityId(nextBinding.getEntityId());
			
				nextBinding.setPath(path);
				nextBinding.setEntityName(entityName);
				nextBinding.setEntityId(entityId);
				
				currentIndex = currentIndex + 1;				
			}

			drawList();
		}		

		/**
		 * This function initializes the vector of previous bindings.
		 */
		 
		function init()
		{
			#foreach($binding in $componentBindings)
				//alert("$binding");
				binding = new Binding("SiteNode", "$binding.entityId", "$formatter.cleanForJavascriptStrings($binding.path)");
				siteNodesVector.addElement(binding);
			#end
	
			//alert("siteNodesVector:" + siteNodesVector.getSize());
			drawList();		
		}
		
		function verticalOnly(item) 
		{
			item.toolManDragGroup.verticalOnly()
		}
	
		function changeOrder(item) 
		{
			var group = item.toolManDragGroup;
			var list = group.element.parentNode;
			var id = list.getAttribute("id");
			var id2 = parseInt(item.getAttribute("itemID"));
			
			if (id == null) 
				return;
	
			group.register('dragend', function() 
			{
				var targetId = -1;
				if(item.previousSibling)
					targetId = parseInt(item.previousSibling.getAttribute("itemID"));
				
				if(targetId > id2)
					dragBindingDown(id2, targetId);
				else	
					dragBindingUp(id2, targetId + 1);
			})
		}
		
		var siteNodesVector = new Vector(0);
			
		var IE  = (document.all)? true: false;
		var Mac = (navigator.cpuClass && navigator.cpuClass.match(/PPC/))? true: false;
		
		function checkDrag(event)
		{
    	    if(document.inputForm.draggedComponentId.value != "") 
    	    {	
    	    	addQualifyer();
	    	    document.inputForm.draggedComponentId.value = "";     
	    	    document.getElementById("buffer").style.visibility = "hidden";
    	    } 
   		}
   		
   		function clearDrag(event)
		{
    	    if(document.inputForm.draggedComponentId.value != "") 
    	    {	
    	    	document.inputForm.draggedComponentId.value = "";
	    	    document.getElementById("buffer").style.visibility = "hidden";
    	    } 
   		}
		
	    //-----------------------------------------------------------------
	    // onmousemove handler
	    //-----------------------------------------------------------------
	    function dragIt(e) 
	    {
			var e = e? e: window.event;
		    
		    drag = document.getElementById("buffer");
	        // -- Move drag element by the same amount the cursor has moved.
	        with (drag) 
	        {
	        	style.left = getX(e) + 1 + "px"; //- dx;
	          	style.top  = getY(e) + 1 + "px"; //- dy;
	        	//style.left = getX(e) - dx;
	          	//style.top  = getY(e) - dy;
	        }
	
	        return false;
	    }
	    
	    function getRect(obj) {
        var rect = new Object();
        rect.top = rect.left = 0;
        var parentObj = obj;
        while (parentObj != null) {
          rect.top  += parentObj.offsetTop;
          rect.left += parentObj.offsetLeft;
          parentObj = parentObj.offsetParent;
        }
        rect.bottom = rect.top  + obj.offsetHeight;
        rect.right  = rect.left + obj.offsetWidth;

		//if()
        return rect;
      }

	  //-----------------------------------------------------------------
      // browser-independent routines for determining event position
      //-----------------------------------------------------------------
      function getX(e) {
      	var x = 0;
        if (IE) {
          x = e.clientX;
          if (!Mac) {
            x += parent.document.documentElement.scrollLeft;
            x += parent.document.body.scrollLeft;
		  }
        } else {
          x = e.pageX + parent.window.scrollX;
        }
        return x
      }

      function getY(e) {
        var y = 0;
        if (IE) {
          y = e.clientY;
          if (!Mac) {
            y += document.documentElement.scrollTop;
            y += document.body.scrollTop;
		  }
        } else {
          y = e.pageY + window.scrollY;
        }
        return y;
      }

	-->    
	</script>

	<style>
		#buffer { 
			position:	absolute;
			z-index:	1000003;
			height:		1em;
			width:		1em;
			border: 	0px solid black;
			color:		#ffffff;
			visibility:	hidden;
			top:		0px;
			left:		0px;
		}
	</style>

</head>

<body class="structuretooledit" onload="javascript:init();" onMouseUp="clearDrag(event);">

<div id="buffer" style="top: 0; left: 0"><img src="css/images/tree/xp/item.png"></div>

<div id="savingLayer" class="infobackground">
	<div class="infoheader">Saving changes</div>
	<div class="infobody">Processing input - please wait!</div>
</div>

<table class="structuretooledit" cellpadding="0" cellspacing="0" border="0" width="100%">
<tr>
	<td valign="top">
		
		<table cellpadding="0" cellspacing="0" border="0" width="100%">
		<tr class="darkapricot">
			<td class="smalllabel">Click on page the binding should use and then "add".</td>
		</tr>
		<tr>
			<td bgcolor="#FEF8D0" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td bgcolor="#F0E1B4" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="5"></td>
		</tr>		
		<tr>
			<td>
		  		<select size="1" name="repositoryId" class="sitedropbox" onChange="javascript:changeRepository(this);" class="contenttool">
				    <option value="">$ui.getString("tool.contenttool.chooseRepositoryLabel")</option>
				    #foreach ($repositoryVO in $repositories)
				    <option value="$repositoryVO.getRepositoryId()">$repositoryVO.getName()</option>
				    #end
				</select>
			</td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="5"></td>
		</tr>	
		<tr>
			<td class="menu" style="border: 1px solid #F0E1B4;">    
				#if($tree == "applet")
					#showJavaTree("350" "400" "254" "248" "208" "SiteNode" $repositoryId "false")
				#else
					<IFRAME frameborder="0" name="itreeFrame" id="itreeFrame" src="ViewStructureToolMenuHtml!bindingView.action?exp=${exp}&repositoryId=${repositoryId}" width="350" height="430" align="baseline"></IFRAME>
				#end
			</td>
		</tr>	
		<tr>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>
				<a href="javascript:addQualifyer();"><img src="css/images/addButtonBlue.gif" border="0"></a>
				<a href="javascript:submitBinding();"><img src="$ui.getString("images.structuretool.buttons.save")" border="0"></a>
				<a href="javascript:window.close();"><img src="$ui.getString("images.structuretool.buttons.cancel")" border="0"></a>
			</td>
		</tr>		
		<tr>
			<td>
				<form name="inputForm" action="CreateServiceBinding.action">
					<input type="hidden" name="draggedComponentId" value="">
					<input type="hidden" name="entityId" value="">
					<input type="hidden" name="repositoryId" value="">
					<input type="hidden" name="path" value="">
					<input type="hidden" name="qualifyerXML" value="">
				</form>
			</td>
		</tr>		
		</table>
	</td>	
	<td>&nbsp;</td>
	<td valign="top">
		<table cellpadding="0" cellspacing="0" border="0" width="100%">
		<tr class="darkapricot">
			<td class="smalllabel">The following pages is bound so far</td>
		</tr>
		<tr>
			<td bgcolor="#FEF8D0" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td bgcolor="#F0E1B4" colspan="4" height="1"><img src="css/images/trans.gif" width="1" height="1"></td>
		</tr>
		<tr>
			<td height="1"><img src="css/images/trans.gif" width="1" height="5"></td>
		</tr>		
		
		<tr>
			<td style="height: 27px;">
				Drag items from the tree to the area below or mark an item and use the "Add"-button.
			</td>
		</tr>
		<tr>
			<td style="border: 1px solid #F0E1B4; background-color: white;" onMouseUp="checkDrag(event);">
				<TABLE id="bindings" border="1">
			  	
			  	</table>
			</td>
		</tr>
				
		</table>
	</td>
</tr>
</table>

<form name="submitForm" method="POST" action="ViewSiteNodePageComponents!addComponentPropertyBindingWithQualifyer.action" TARGET="">
	<input type="hidden" name="siteNodeId" value="$siteNodeId">
	<input type="hidden" name="languageId" value="$languageId">
	<input type="hidden" name="contentId" value="$contentId">
	<input type="hidden" name="componentId" value="$componentId">
	<input type="hidden" name="propertyName" value="$propertyName">
	<input type="hidden" name="showSimple" value="$showSimple">
	<input type="hidden" name="showDecorated" value="$!showDecorated">
	<input type="hidden" name="path" value="">
	<input type="hidden" name="qualifyerXML" value="">
</form>

</body>
</html>
